name: Update Subscriber Count

on:
  schedule:
    # Run every hour
    - cron: '0 * * * *'
  workflow_dispatch: # Allow manual trigger

jobs:
  update-count:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v3
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Fetch subscriber count from ConvertKit public page
      id: fetch-count
      run: |
        # Try to fetch from public stats page
        # Note: This URL pattern might need adjustment based on ConvertKit's public stats
        STATS_URL="https://app.convertkit.com/forms/8269255/stats"
        
        # For now, we'll need the API key since public stats aren't easily scrapeable
        # If you find a public endpoint, replace this section
        if [ -n "${{ secrets.CONVERTKIT_API_SECRET }}" ]; then
          # Get form subscribers using the correct endpoint
          RESPONSE=$(curl -s "https://api.convertkit.com/v3/forms/8269255/subscriptions?api_secret=${{ secrets.CONVERTKIT_API_SECRET }}")
          echo "API Response: $RESPONSE"
          COUNT=$(echo $RESPONSE | jq -r '.total_subscriptions // 0')
        else
          # Fallback: increment existing count (not ideal but works without API)
          if [ -f subscriber-count.json ]; then
            COUNT=$(cat subscriber-count.json | jq -r '.count // 1')
          else
            COUNT=1
          fi
        fi
        
        # Update the JSON file
        echo "{
          \"count\": $COUNT,
          \"lastUpdated\": \"$(date -u +%Y-%m-%dT%H:%M:%SZ)\"
        }" > subscriber-count.json
        
        echo "Subscriber count: $COUNT"
        echo "count=$COUNT" >> $GITHUB_OUTPUT
    
    - name: Update Gist with subscriber count
      run: |
        # Create or update gist with subscriber count
        GIST_ID="${{ secrets.GIST_ID }}"
        
        if [ -z "$GIST_ID" ]; then
          echo "Creating new gist..."
          RESPONSE=$(curl -s -X POST \
            -H "Authorization: token ${{ secrets.GIST_TOKEN }}" \
            -H "Accept: application/vnd.github.v3+json" \
            https://api.github.com/gists \
            -d '{
              "description": "Bitworld subscriber count",
              "public": true,
              "files": {
                "subscriber-count.json": {
                  "content": '"$(cat subscriber-count.json | jq -c .)"'
                }
              }
            }')
          
          NEW_GIST_ID=$(echo $RESPONSE | jq -r '.id')
          echo "Created gist with ID: $NEW_GIST_ID"
          echo "Add this as GIST_ID secret in your repository"
        else
          # Update existing gist
          curl -s -X PATCH \
            -H "Authorization: token ${{ secrets.GIST_TOKEN }}" \
            -H "Accept: application/vnd.github.v3+json" \
            https://api.github.com/gists/$GIST_ID \
            -d '{
              "files": {
                "subscriber-count.json": {
                  "content": '"$(cat subscriber-count.json | jq -c .)"'
                }
              }
            }'
          
          echo "Updated gist: https://gist.github.com/$GIST_ID"
        fi